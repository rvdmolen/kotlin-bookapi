openapi: "3.0.0"
info:
  version: 1.0.0
  title: Bookstore
  license:
    name: MIT
servers:
  - url: http://localhost:8080/
paths:
  /books:
    get:
      summary: List all books
      operationId: listBooks
      tags:
        - books
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of books
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BooksDTO"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
    post:
      summary: Create a book
      operationId: addBook
      tags:
        - books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookDTO"
      responses:
        '200':
          description: Id of the new book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookIdentifierDTO"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
  /books/{bookId}:
    get:
      summary: Info for a specific book
      operationId: showBookById
      tags:
        - books
      parameters:
        - name: bookId
          in: path
          required: true
          description: The id of the book to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookDTO"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
    delete:
      summary: Delete a specific book
      operationId: deleteBookById
      tags:
        - books
      parameters:
        - name: bookId
          in: path
          required: true
          description: The id of the book to retrieve
          schema:
            type: string
      responses:
        '204':
          description: 'No Content'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
components:
  schemas:
    BookDTO:
      type: object
      required:
        - id
        - name
        - author
        - category
        - isbn
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        author:
          type: integer
          format: int64
        category:
          type: string
        isbn:
          type: string
    BookIdentifierDTO:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
    BooksDTO:
      type: array
      items:
        $ref: "#/components/schemas/BookDTO"
    ErrorDTO:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string